#!/usr/bin/env node

/*
 * Register arguments with yargs
 */

var yargs = require('yargs')

.usage('\nUsage: digup <path> [query-args] [options]')

.help('h').alias('h','help')

.option('e',{
  alias: 'expand',
  type: 'string',
  describe: [
    'Expand matchid so it shows 5 lines before and after the',
    'matched one.'
  ].join(' ')
})

.option('p',{
  alias: 'pick',
  type: 'boolean',
  describe: [
    'Passing this flag will return the path of the',
    'file currently expanded line being expanded belongs to.',
    'It\'s usefull for furder exploration, for example piping it to "cat".'
  ]
})

.option('no-color',{
  type: 'boolean',
  describe: 'Disable output colors.'
});

var argv = yargs.argv;
var path = require('path');
var colors = require('colors');
var conf = {};

/*
 * Parse the query / mode / options
 * Exit if no arguments are present.
 */

if (argv._.length) {
  
  (function(args){
  
    if (process.stdin.isTTY) {
      conf.mode = 'standalone';
      conf.path = args.shift() || '.';
    } else {
      conf.mode = 'pipeline';
    }
    
    conf.query = args.map(function(q){
      return new RegExp('('+q.replace(
        /([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1"
      )+')','ig');
    });
  
  })(argv._);

} else {
  
  yargs.showHelp();
  process.exit();
  
}

/*
 * Parse the expand option
 */

if (argv.e) {
  
  (function(e){
  
    var match = e.match(/(\d+)\/?(\d+)?/);
    if (match[1]) conf.expand = {
      id: parseInt(match[1]),
      size: match[2] ? parseInt(match[2]) : 5,
    };
    
  })(argv.e);
  
}

/*
 * Pass along the "pick" option, for conveniance
 */

if (argv.p) conf.pick = true;

/*
 * Start shovelin'
 */

var disp = require('../digup')(conf);

/*
 * Format the output
 */

disp.on('finder::match',function(line,exit){
  
  if (conf.pick) {
    
    console.log(line.from);
    
  } else {
  
    line.past.forEach   (function(p){ print (p,line.id) });
    
    print (line);
    
    line.future.forEach (function(f){ print (f,line.id) });
    
  }
    
  if (exit) process.exit();

});

/*
 * Print line
 */

function print (line,id) {
  
  var out = '{ID}{S} {DIR}{FILE}[{L}]    {LINE}'
  
  .replace (/\{ID\}/,(id ? id.replace(/[\d+]/g,' ') : line.id).yellow)
  .replace (/\{S\}/,(id ? ' ' : ':'.dim))
  .replace (/\{DIR\}/,(path.dirname(line.from) + '/').dim)
  .replace (/\{FILE\}/,(path.basename(line.from)).magenta)
  .replace (/\{L\}/,line.row.toString().cyan)
  .replace (/\{LINE\}/,line.value);
  
  console.log(out);
  
}
